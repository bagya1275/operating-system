#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

void* philosopher(void* arg) {
    int id = *(int*)arg;
    int leftFork = id;
    int rightFork = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(rand() % 3 + 1); // Simulate thinking

        // Pick up forks
        printf("Philosopher %d is hungry and trying to pick up forks.\n", id);

        // To avoid deadlock, pick the lower numbered fork first
        if (id % 2 == 0) {
            pthread_mutex_lock(&forks[leftFork]);
            pthread_mutex_lock(&forks[rightFork]);
        } else {
            pthread_mutex_lock(&forks[rightFork]);
            pthread_mutex_lock(&forks[leftFork]);
        }

        // Eating
        printf("Philosopher %d is eating.\n", id);
        sleep(rand() % 2 + 1); // Simulate eating

        // Put down forks
        pthread_mutex_unlock(&forks[leftFork]);
        pthread_mutex_unlock(&forks[rightFork]);

        printf("Philosopher %d has finished eating and put down forks.\n", id);
    }

    return NULL;
}

int main() {
    int i, ids[NUM_PHILOSOPHERS];

    // Initialize mutexes for forks
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create philosopher threads
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Join threads (infinite loop prevents reaching here, but it keeps the main thread alive)
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
