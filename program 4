#include <stdio.h>

int main() {
    int n, i, j, pos, temp;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int bt[n], p[n], ct[n], tat[n], wt[n];
    float total_tat = 0, total_wt = 0;

    // Input burst times
    printf("Enter burst times for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process P%d: ", i + 1);
        scanf("%d", &bt[i]);
        p[i] = i + 1; // Store process number
    }

    // Sort processes by burst time (SJF logic)
    for (i = 0; i < n - 1; i++) {
        pos = i;
        for (j = i + 1; j < n; j++) {
            if (bt[j] < bt[pos]) pos = j;
        }
        // Swap burst times and process numbers
        temp = bt[i];
        bt[i] = bt[pos];
        bt[pos] = temp;

        temp = p[i];
        p[i] = p[pos];
        p[pos] = temp;
    }

    // Calculate Completion Time
    ct[0] = bt[0];
    for (i = 1; i < n; i++) {
        ct[i] = ct[i - 1] + bt[i];
    }

    // Calculate Turnaround Time and Waiting Time
    for (i = 0; i < n; i++) {
        tat[i] = ct[i];
        wt[i] = tat[i] - bt[i];
        total_tat += tat[i];
        total_wt += wt[i];
    }

    // Output results
    printf("\nP\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", p[i], bt[i], ct[i], tat[i], wt[i]);
    }

    // Display averages
    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
    printf("Average Waiting Time: %.2f\n", total_wt / n);

    return 0;
}
