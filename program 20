#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex;   // Semaphore for mutual exclusion
sem_t write;   // Semaphore to lock the shared resource
int read_count = 0;  // Number of active readers
int shared_data = 0; // Shared resource

// Reader function
void *reader(void *arg) {
    int id = *(int *)arg;

    // Entry section
    sem_wait(&mutex);
    read_count++;
    if (read_count == 1) {
        sem_wait(&write);  // First reader locks the resource
    }
    sem_post(&mutex);

    // Critical section
    printf("Reader %d is reading the shared data: %d\n", id, shared_data);
    sleep(1);  // Simulate reading time

    // Exit section
    sem_wait(&mutex);
    read_count--;
    if (read_count == 0) {
        sem_post(&write);  // Last reader unlocks the resource
    }
    sem_post(&mutex);

    return NULL;
}

// Writer function
void *writer(void *arg) {
    int id = *(int *)arg;

    // Entry section
    sem_wait(&write);  // Lock the shared resource

    // Critical section
    shared_data++;
    printf("Writer %d is writing to shared data: %d\n", id, shared_data);
    sleep(1);  // Simulate writing time

    // Exit section
    sem_post(&write);  // Unlock the shared resource

    return NULL;
}

int main() {
    pthread_t readers[5], writers[2];
    int reader_ids[5], writer_ids[2];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);  // Binary semaphore
    sem_init(&write, 0, 1);  // Binary semaphore

    // Create writer threads
    for (int i = 0; i < 2; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Create reader threads
    for (int i = 0; i < 5; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Wait for all threads to finish
    for (int i = 0; i < 2; i++) {
        pthread_join(writers[i], NULL);
    }
    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&write);

    return 0;
}
