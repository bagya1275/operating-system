#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5  // Size of the buffer

int buffer[BUFFER_SIZE];  // Shared buffer
int in = 0;               // Index for producer to insert
int out = 0;              // Index for consumer to remove

sem_t empty;  // Counts the empty slots in the buffer
sem_t full;   // Counts the filled slots in the buffer
pthread_mutex_t mutex;  // Ensures mutual exclusion

// Producer function
void *producer(void *arg) {
    for (int i = 0; i < 10; i++) {  // Produce 10 items
        int item = i + 1;  // Item to be produced

        sem_wait(&empty);  // Wait for an empty slot
        pthread_mutex_lock(&mutex);  // Enter critical section

        // Produce the item and place it in the buffer
        buffer[in] = item;
        printf("Producer produced item %d at buffer[%d]\n", item, in);
        in = (in + 1) % BUFFER_SIZE;  // Move to the next slot

        pthread_mutex_unlock(&mutex);  // Exit critical section
        sem_post(&full);  // Signal that a new item is available
    }
    return NULL;
}

// Consumer function
void *consumer(void *arg) {
    for (int i = 0; i < 10; i++) {  // Consume 10 items
        sem_wait(&full);  // Wait for a filled slot
        pthread_mutex_lock(&mutex);  // Enter critical section

        // Consume the item from the buffer
        int item = buffer[out];
        printf("Consumer consumed item %d from buffer[%d]\n", item, out);
        out = (out + 1) % BUFFER_SIZE;  // Move to the next slot

        pthread_mutex_unlock(&mutex);  // Exit critical section
        sem_post(&empty);  // Signal that a slot is now empty
    }
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);  // All slots are initially empty
    sem_init(&full, 0, 0);  // No slots are initially full
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Wait for both threads to complete
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Destroy semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
