#include <stdio.h>
#include <stdbool.h>

#define P 5  // Number of processes
#define R 3  // Number of resources

// Function to check if the system is in a safe state
bool isSafeState(int processes[], int avail[], int max[][R], int alloc[][R], int need[][R]) {
    int work[R];
    bool finish[P];
    
    // Initialize work and finish
    for (int i = 0; i < R; i++) {
        work[i] = avail[i];
    }
    for (int i = 0; i < P; i++) {
        finish[i] = false;
    }

    // Find a process that can finish
    int count = 0;
    while (count < P) {
        bool progress = false;
        
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                // Check if the process can be completed with available resources
                bool canFinish = true;
                for (int r = 0; r < R; r++) {
                    if (need[p][r] > work[r]) {
                        canFinish = false;
                        break;
                    }
                }

                if (canFinish) {
                    // Simulate resource allocation
                    for (int r = 0; r < R; r++) {
                        work[r] += alloc[p][r];
                    }
                    finish[p] = true;
                    count++;
                    progress = true;
                    break;
                }
            }
        }

        // If no process can finish, the system is in an unsafe state
        if (!progress) {
            return false;
        }
    }
    return true;
}

// Function to request resources from the system
bool requestResources(int processes[], int avail[], int max[][R], int alloc[][R], int need[][R], int process, int request[]) {
    // Check if the request is less than or equal to the need and available resources
    for (int i = 0; i < R; i++) {
        if (request[i] > need[process][i]) {
            printf("Error: Process has exceeded its maximum claim.\n");
            return false;
        }
        if (request[i] > avail[i]) {
            printf("Error: Not enough resources available.\n");
            return false;
        }
    }

    // Temporarily allocate the resources
    for (int i = 0; i < R; i++) {
        avail[i] -= request[i];
        alloc[process][i] += request[i];
        need[process][i] -= request[i];
    }

    // Check if the system is in a safe state after allocation
    if (isSafeState(processes, avail, max, alloc, need)) {
        printf("Resources allocated successfully.\n");
        return true;
    } else {
        // Rollback the allocation if not safe
        for (int i = 0; i < R; i++) {
            avail[i] += request[i];
            alloc[process][i] -= request[i];
            need[process][i] += request[i];
        }
        printf("Error: System is in an unsafe state after allocation. Request denied.\n");
        return false;
    }
}

int main() {
    int processes[] = {0, 1, 2, 3, 4};  // Process identifiers

    // Available resources
    int avail[] = {3, 3, 2};  // Example: 3 instances of Resource 1, 3 of Resource 2, 2 of Resource 3

    // Maximum resources each process can ever need
    int max[][R] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    // Resources allocated to each process
    int alloc[][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    // Resources still needed by each process
    int need[P][R];
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Display initial available resources
    printf("Available Resources: ");
    for (int i = 0; i < R; i++) {
        printf("%d ", avail[i]);
    }
    printf("\n");

    // Request resources for process 1
    int request[] = {1, 0, 2};  // Process 1 requests 1 unit of Resource 1, 0 units of Resource 2, and 2 units of Resource 3
    int process = 1;
    if (requestResources(processes, avail, max, alloc, need, process, request)) {
        // Show updated available resources after successful allocation
        printf("Updated Available Resources: ");
        for (int i = 0; i < R; i++) {
            printf("%d ", avail[i]);
        }
        printf("\n");
    }

    return 0;
}
