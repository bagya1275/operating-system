#include <stdio.h>

#define MAX 100

// Structure to represent a process
typedef struct {
    int pid;        // Process ID
    int burst_time; // Burst time
    int priority;   // Priority
    int waiting_time; // Waiting time
    int turnaround_time; // Turnaround time
} Process;

// Function to sort processes by priority (highest priority first)
void sort_by_priority(Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].priority < p[j].priority) {
                // Swap processes
                Process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}

// Function to calculate waiting time and turnaround time
void calculate_times(Process p[], int n) {
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        p[i].waiting_time = current_time;
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;
        current_time += p[i].burst_time;
    }
}

// Function to display process details
void display(Process p[], int n) {
    printf("\nProcess\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", 
               p[i].pid, p[i].burst_time, p[i].priority, 
               p[i].waiting_time, p[i].turnaround_time);
    }
}

int main() {
    Process processes[MAX];
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time and priority for process P%d: ", processes[i].pid);
        scanf("%d %d", &processes[i].burst_time, &processes[i].priority);
    }

    // Sort processes by priority
    sort_by_priority(processes, n);

    // Calculate waiting time and turnaround time
    calculate_times(processes, n);

    // Display the result
    display(processes, n);

    return 0;
}
