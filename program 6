#include <stdio.h>
#include <limits.h>

#define MAX 100

// Structure to represent a process
typedef struct {
    int pid;         // Process ID
    int arrival_time; // Arrival time
    int burst_time;  // Burst time
    int priority;    // Priority
    int remaining_time; // Remaining burst time
    int waiting_time;   // Waiting time
    int turnaround_time; // Turnaround time
    int is_completed;   // Completion flag
} Process;

// Function to find the index of the process with the highest priority
int get_highest_priority(Process p[], int n, int current_time) {
    int idx = -1;
    int highest_priority = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (!p[i].is_completed && p[i].arrival_time <= current_time && p[i].priority < highest_priority) {
            highest_priority = p[i].priority;
            idx = i;
        }
    }
    return idx;
}

int main() {
    Process processes[MAX];
    int n, current_time = 0, completed = 0;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time, burst time, and priority for process P%d: ", processes[i].pid);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].is_completed = 0;
    }

    // Preemptive priority scheduling
    while (completed < n) {
        int idx = get_highest_priority(processes, n, current_time);

        if (idx != -1) {
            processes[idx].remaining_time--;
            current_time++;

            if (processes[idx].remaining_time == 0) {
                completed++;
                processes[idx].is_completed = 1;

                processes[idx].turnaround_time = current_time - processes[idx].arrival_time;
                processes[idx].waiting_time = processes[idx].turnaround_time - processes[idx].burst_time;
            }
        } else {
            // If no process is ready, move the current time forward
            current_time++;
        }
    }

    // Display results
    printf("\nProcess\tAT\tBT\tPriority\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n",
               processes[i].pid,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].priority,
               processes[i].waiting_time,
               processes[i].turnaround_time);
    }

    return 0;
}
