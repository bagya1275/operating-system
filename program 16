#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define a structure for Employee
struct Employee {
    int id;
    char name[50];
    float salary;
};

// Function to add an employee record
void addEmployee(FILE *file) {
    struct Employee emp;

    printf("Enter Employee ID: ");
    scanf("%d", &emp.id);
    getchar();  // To consume the newline character left by scanf
    printf("Enter Employee Name: ");
    fgets(emp.name, sizeof(emp.name), stdin);
    emp.name[strcspn(emp.name, "\n")] = '\0';  // Remove newline character
    printf("Enter Employee Salary: ");
    scanf("%f", &emp.salary);

    fseek(file, (emp.id - 1) * sizeof(struct Employee), SEEK_SET);  // Position the file pointer
    fwrite(&emp, sizeof(struct Employee), 1, file);  // Write employee data to the file
    printf("Employee record added successfully.\n");
}

// Function to display an employee record
void displayEmployee(FILE *file) {
    struct Employee emp;
    int empId;

    printf("Enter Employee ID to display: ");
    scanf("%d", &empId);

    fseek(file, (empId - 1) * sizeof(struct Employee), SEEK_SET);  // Position the file pointer
    fread(&emp, sizeof(struct Employee), 1, file);  // Read employee data from the file

    if (emp.id == 0) {
        printf("Employee record not found.\n");
    } else {
        printf("Employee ID: %d\n", emp.id);
        printf("Employee Name: %s\n", emp.name);
        printf("Employee Salary: %.2f\n", emp.salary);
    }
}

// Function to update an employee record
void updateEmployee(FILE *file) {
    struct Employee emp;
    int empId;

    printf("Enter Employee ID to update: ");
    scanf("%d", &empId);

    fseek(file, (empId - 1) * sizeof(struct Employee), SEEK_SET);  // Position the file pointer
    fread(&emp, sizeof(struct Employee), 1, file);  // Read employee data from the file

    if (emp.id == 0) {
        printf("Employee record not found.\n");
    } else {
        printf("Current details of Employee ID %d:\n", emp.id);
        printf("Name: %s\n", emp.name);
        printf("Salary: %.2f\n", emp.salary);

        // Prompt user for new details
        getchar();  // To consume the newline character left by scanf
        printf("Enter new name: ");
        fgets(emp.name, sizeof(emp.name), stdin);
        emp.name[strcspn(emp.name, "\n")] = '\0';  // Remove newline character
        printf("Enter new salary: ");
        scanf("%f", &emp.salary);

        fseek(file, (empId - 1) * sizeof(struct Employee), SEEK_SET);  // Position the file pointer
        fwrite(&emp, sizeof(struct Employee), 1, file);  // Write updated employee data
        printf("Employee record updated successfully.\n");
    }
}

// Function to display all employee records
void displayAllEmployees(FILE *file) {
    struct Employee emp;

    printf("All Employee Records:\n");
    fseek(file, 0, SEEK_SET);  // Move to the beginning of the file

    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        if (emp.id != 0) {
            printf("Employee ID: %d\n", emp.id);
            printf("Employee Name: %s\n", emp.name);
            printf("Employee Salary: %.2f\n\n", emp.salary);
        }
    }
}

int main() {
    FILE *file = fopen("employee.dat", "rb+");

    // Open the file for reading and writing, create it if it doesn't exist
    if (file == NULL) {
        file = fopen("employee.dat", "wb+");
        if (file == NULL) {
            printf("Error in opening file.\n");
            return -1;
        }
    }

    int choice;
    do {
        printf("\nMenu:\n");
        printf("1. Add Employee\n");
        printf("2. Display Employee\n");
        printf("3. Update Employee\n");
        printf("4. Display All Employees\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addEmployee(file);
                break;
            case 2:
                displayEmployee(file);
                break;
            case 3:
                updateEmployee(file);
                break;
            case 4:
                displayAllEmployees(file);
                break;
            case 5:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);

    fclose(file);
    return 0;
}
